# -*- coding: utf-8 -*-
"""
Created on Fri Feb 24 18:21:32 2023

@author: simon
"""



import numpy as np
from scipy.optimize import minimize
import math


def quadratic(x,a, b, c):
    return a/(1+2.73**(-b*x-c))

def objective(params):
    a, b, c = params
    return np.sum((quadratic(x,a,b, c) - y)**2)



# Load the data - the extra zeros are added as the curve should start from 0 
y=np.array([ 0,0	, 0,0	,0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,	0.722	,	0.722	,	0.722	,	0.722	,	0.722	,	0.722	,	0.270	,	0.722	,	0.590	,	0.310	,	0.200	,	0.722	,	0.722	,	0.722	,	0.340	,	0.330	,	0.450	,	0.722	,	0.722	,	0.430	,	0.290	,	0.722	,	0.380	,	0.722	,	0.340	,	0.400	,	0.410	,	0.722	,	0.370	,	0.270	,	0.230	,	0.350	,	0.520	,	0.722	,	0.722	,	0.530	,	0.280	,	0.350	,	0.400	,	0.530	,	0.390	,	0.590	,	0.410	,	0.722	,	0.360	,	0.460	,	0.690	,	0.360	,	0.530	,	0.370	,	0.390	,	0.530	,	0.590	,	0.760	,	0.722	,	0.370	,	0.722	,	0.722	,	0.722	,	0.722	,	0.720	,	0.380	,	0.520	,	0.560	,	0.330	,	0.680	,	0.300	,	0.722	,	0.570	,	0.420	,	0.680	,	0.480	,	0.420	,	0.540	,	0.510	,	0.370	,	0.590	,	0.300	,	0.280	,	0.570	,	0.770	,	0.700	,	0.710	,	0.710	,	0.280	,	0.690	,	0.660	,	0.630	,	0.330	,	0.490	,	0.490	,	0.370	,	0.490	,	0.550	,	0.290	,	0.590	,	0.580	,	0.730	,	0.720	,	0.670	,	0.300	,	0.700	,	0.730	,	0.640	,	0.380	,	0.490	,	0.540	,	0.530	,	0.722	,	0.690	,	0.600	,	0.550	,	0.760	,	0.800	,	0.490	,	0.360	,	0.560	,	0.620	,	0.730	,	0.722	,	0.650	,	0.390	,	0.730	,	0.610	,	0.540	,	0.400	,	0.670	,	0.730	,	0.460	,	0.740	,	0.690	,	0.460	,	0.710	,	0.610	,	0.590	,	0.660	,	0.580	,	0.790	,	0.570	,	0.780	,	0.590	,	0.420	,	0.620	,	0.890	,	0.440	,	0.800	,	0.280	,	0.470	,	0.600	,	0.590	,	0.750	,	0.720	,	0.550	,	0.830	,	0.710	,	0.600	,	0.690	,	0.740	,	0.720	,	0.810	,	0.790	,	0.700	,	0.380	,	0.800	,	0.630	,	0.450	,	0.880	,	0.820	,	0.650	,	0.510	,	0.680	,	0.380	,	0.670	,	0.750	,	0.740	,	0.610	,	0.550	,	0.580	,	0.630	,	0.800	,	0.650	,	0.760	,	0.870	,	0.860	,	0.630	,	0.630	,	0.800	,	0.620	,	0.720	,	0.430	,	0.530	,	0.590	,	0.670	,	0.530	,	0.700	,	0.770	,	0.820	,	0.620	,	0.720	,	0.620	,	0.540	,	0.840	,	0.750	,	0.470	,	0.490	,	0.490	,	0.660	,	0.660	,	0.870	,	0.820	,	0.940	,	0.820	,	0.700	,	0.890	,	0.840	,	0.780	,	0.720	,	0.710	,	0.580	,	0.540	,	0.660	,	0.580	,	0.700	,	0.890	,	0.590	,	0.640	,	0.660	,	0.650	,	0.670	,	0.750	,	0.750	,	0.840	,	0.640	,	0.640	,	0.560	,	0.460	,	0.700	,	0.680	,	0.760	,	0.710	,	0.550	,	0.790	,	0.850	,	0.560	,	0.740	,	0.760	,	0.610	,	0.480	,	0.680	,	0.790	,	0.770	,	0.910	,	0.680	,	0.670	,	0.920	,	0.690	,	0.680	,	0.640	,	0.460	,	0.720	,	0.590	,	0.610	,	0.570	,	0.810	,	0.790	,	0.510	,	0.800	,	0.840	,	0.820	,	0.640	,	0.470	,	0.630	,	0.660	,	0.880	,	0.700	,	0.750	,	0.840	,	0.990	,	0.810	,	0.820	,	0.680	,	0.860	,	0.840	,	0.520	,	0.440	,	0.660	,	0.610	,	0.500	,	0.730	,	0.490	,	0.770	,	0.480	,	0.660	,	0.880	,	0.470	,	0.640	,	0.760	,	0.520	,	0.510	,	0.780	,	0.610	,	0.570	,	0.720	,	0.480	,	0.930	,	0.880	,	0.640	,	0.830	,	0.470	,	0.660	,	0.500	,	0.900	,	0.600	,	0.880	,	0.640	,	0.750	,	0.690	,	0.800	,	0.760	,	0.440	,	0.930	,	0.900	,	0.980	,	0.722	,	0.720	,	0.700	,	0.880	,	0.500	,	0.620	,	0.470	,	0.820	,	0.930	,	0.820	,	0.560	,	0.590	,	0.690	,	0.520	,	0.770	,	0.640	,	0.800	,	0.420	,	0.680	,	0.540])

x=np.array([ 0,0	, 0,0	,0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0, 	6.081890244	,	9.6	,	9.8	,	10	,	10.61	,	11.99931559	,	12.61333333	,	14	,	14.12681564	,	14.22824742	,	14.30375691	,	14.9725	,	15	,	15.1552381	,	15.27825503	,	15.45473684	,	15.90439437	,	16	,	16	,	17.11377522	,	17.73604396	,	18	,	18.33789189	,	19	,	19.19910663	,	19.20018519	,	19.22396491	,	19.33	,	19.46869565	,	19.6435	,	19.82983607	,	19.93967816	,	20.19778689	,	21	,	21	,	21.697	,	22.21012245	,	22.70155224	,	22.85591623	,	22.9668323	,	23.30244019	,	23.46	,	23.79694611	,	23.81181818	,	24.11026455	,	24.17708215	,	24.18021563	,	24.26814016	,	24.30048443	,	25.06155738	,	25.07552124	,	25.37680672	,	25.49148148	,	25.60588235	,	25.65299771	,	25.79528517	,	26	,	26	,	26.01695652	,	26.01956522	,	26.10638298	,	26.40531507	,	26.55296188	,	26.74688312	,	26.76073469	,	26.84539683	,	26.93666667	,	27.47	,	28.90940476	,	28.99095238	,	29.43350158	,	29.76398058	,	29.8102965	,	30.11913649	,	30.16797468	,	30.27005495	,	30.27506849	,	30.35542857	,	30.76928571	,	30.91688889	,	31.11539063	,	31.51671429	,	31.53748201	,	31.56058577	,	31.67576812	,	31.70365559	,	31.71693151	,	31.76072727	,	31.96	,	32.23571429	,	32.52498789	,	32.70419192	,	32.765	,	32.81420168	,	32.88285714	,	33.25937695	,	33.30252852	,	33.3102459	,	34.10764479	,	34.26532091	,	34.33725806	,	35.04207547	,	35.22134771	,	35.30122449	,	35.345	,	35.57010101	,	35.85147651	,	35.86796875	,	36.01585366	,	36.31315018	,	36.47704501	,	36.5718578	,	36.68140351	,	36.85859459	,	37.13043478	,	37.60631579	,	37.68773026	,	37.96491484	,	37.98896104	,	37.99133333	,	38.08757202	,	38.23	,	38.23034483	,	38.32656388	,	38.35512635	,	38.45383117	,	39.05642857	,	39.34466019	,	39.3614094	,	39.50591837	,	39.5302924	,	39.53113744	,	39.57763066	,	39.62785498	,	40.25851852	,	40.57849785	,	40.64137363	,	40.89454545	,	40.90584527	,	41.54104478	,	41.65253456	,	41.75937269	,	41.96136213	,	42.03925373	,	42.08746479	,	42.23	,	42.52917647	,	42.70972477	,	42.73377049	,	42.87646341	,	43.00371901	,	43.06340782	,	43.46741144	,	43.5275	,	43.66619048	,	43.67547826	,	43.96111111	,	44.01992126	,	44.06539326	,	44.32587224	,	44.57091644	,	44.64640569	,	44.87679452	,	45.36043478	,	45.43011494	,	45.70455801	,	45.72065789	,	45.87166163	,	45.92486141	,	45.92604938	,	45.94776398	,	46.40203647	,	46.45325062	,	46.51645022	,	46.535	,	46.55	,	46.78533898	,	46.78748031	,	47.25583062	,	47.28176991	,	47.38838298	,	47.49979849	,	47.50731092	,	47.66111111	,	47.94136986	,	48.07795918	,	48.0938961	,	48.22359223	,	48.50410658	,	48.57269663	,	48.64906667	,	48.69696429	,	48.75830846	,	48.82255952	,	48.97448052	,	49.22547619	,	49.38211155	,	49.53557377	,	49.69918919	,	49.90817337	,	49.96838961	,	50.29409639	,	50.4908313	,	50.49136986	,	50.60853862	,	50.69259574	,	50.83643735	,	51.45448598	,	51.5039759	,	51.54777293	,	51.79763077	,	52.13326146	,	52.34522184	,	52.41878706	,	52.48043956	,	52.58647619	,	53.17511727	,	53.55675676	,	53.55887931	,	53.8909816	,	54.17081181	,	54.46131868	,	54.7741791	,	54.94717557	,	55.0027003	,	55.05556901	,	55.12642857	,	55.33981221	,	55.73440678	,	55.81527132	,	56.11674772	,	56.31865801	,	57.01981873	,	57.06897243	,	57.11981865	,	57.19375	,	57.46671159	,	57.48908676	,	57.74410774	,	58.09621622	,	58.17262295	,	58.22649547	,	58.40737201	,	58.58634146	,	58.61571429	,	58.90225974	,	59.50614525	,	60.64186722	,	60.71192308	,	60.77384259	,	61.32173469	,	61.58186813	,	61.61043956	,	61.72	,	61.72237467	,	61.93857143	,	62.109375	,	62.16760291	,	62.20737991	,	62.21388571	,	62.2930031	,	62.3666	,	62.5975	,	62.65625899	,	62.78731343	,	62.86793103	,	63.78396226	,	63.86182073	,	63.91361345	,	64.60185841	,	64.64171315	,	64.87590426	,	64.94677419	,	65.06636691	,	65.07661376	,	65.61901639	,	65.95626404	,	66.51636015	,	67.42508982	,	67.52169863	,	67.56742268	,	67.99716981	,	68.00129353	,	69.04178138	,	69.10833333	,	69.42809524	,	69.43129121	,	69.6271028	,	69.78982143	,	69.86472284	,	70.08017857	,	71.23396437	,	71.60664083	,	71.6208	,	71.67407792	,	72.21632877	,	72.92977199	,	73.47585127	,	74.77012987	,	76.17	,	76.71207006	,	77.08158904	,	77.4747981	,	78.08273556	,	78.10706349	,	78.57081232	,	80.20971429	,	80.33534483	,	80.47101604	,	81.69098592	,	81.97305764	,	82.75887052	,	82.79146444	,	83.69559278	,	83.744	,	84.1776234	,	84.64359649	,	85.08764706	,	85.65	,	86.29973384	,	86.32017751	,	86.98934783	,	87.18	,	88	,	88.38973422	,	90.19535714	,	91.66682609	,	92.2445584	,	92.43315942	,	95.23398496	,	96.14096774	,	96.61201327	,	98.77309589	,	99.24515038	,	99.44827004	,	100.9509028	,	101.8163196	,	102.6460526	,	103.1905627	,	104.0361633	,	107.2425397	,	117.9728571	,	119.5495477])

# Define the objective function
def objective(params):
    a,b, c = params
    return np.sum((quadratic(x, a,b, c) - y)**2)

# Estimate the parameters using the least squares method
initial_guess = [0,0, 0]
result = minimize(objective, initial_guess)

yorig=np.array([ 0.722	,	0.722	,	0.722	,	0.722	,	0.722	,	0.722	,	0.270	,	0.722	,	0.590	,	0.310	,	0.200	,	0.722	,	0.722	,	0.722	,	0.340	,	0.330	,	0.450	,	0.722	,	0.722	,	0.430	,	0.290	,	0.722	,	0.380	,	0.722	,	0.340	,	0.400	,	0.410	,	0.722	,	0.370	,	0.270	,	0.230	,	0.350	,	0.520	,	0.722	,	0.722	,	0.530	,	0.280	,	0.350	,	0.400	,	0.530	,	0.390	,	0.590	,	0.410	,	0.722	,	0.360	,	0.460	,	0.690	,	0.360	,	0.530	,	0.370	,	0.390	,	0.530	,	0.590	,	0.760	,	0.722	,	0.370	,	0.722	,	0.722	,	0.722	,	0.722	,	0.720	,	0.380	,	0.520	,	0.560	,	0.330	,	0.680	,	0.300	,	0.722	,	0.570	,	0.420	,	0.680	,	0.480	,	0.420	,	0.540	,	0.510	,	0.370	,	0.590	,	0.300	,	0.280	,	0.570	,	0.770	,	0.700	,	0.710	,	0.710	,	0.280	,	0.690	,	0.660	,	0.630	,	0.330	,	0.490	,	0.490	,	0.370	,	0.490	,	0.550	,	0.290	,	0.590	,	0.580	,	0.730	,	0.720	,	0.670	,	0.300	,	0.700	,	0.730	,	0.640	,	0.380	,	0.490	,	0.540	,	0.530	,	0.722	,	0.690	,	0.600	,	0.550	,	0.760	,	0.800	,	0.490	,	0.360	,	0.560	,	0.620	,	0.730	,	0.722	,	0.650	,	0.390	,	0.730	,	0.610	,	0.540	,	0.400	,	0.670	,	0.730	,	0.460	,	0.740	,	0.690	,	0.460	,	0.710	,	0.610	,	0.590	,	0.660	,	0.580	,	0.790	,	0.570	,	0.780	,	0.590	,	0.420	,	0.620	,	0.890	,	0.440	,	0.800	,	0.280	,	0.470	,	0.600	,	0.590	,	0.750	,	0.720	,	0.550	,	0.830	,	0.710	,	0.600	,	0.690	,	0.740	,	0.720	,	0.810	,	0.790	,	0.700	,	0.380	,	0.800	,	0.630	,	0.450	,	0.880	,	0.820	,	0.650	,	0.510	,	0.680	,	0.380	,	0.670	,	0.750	,	0.740	,	0.610	,	0.550	,	0.580	,	0.630	,	0.800	,	0.650	,	0.760	,	0.870	,	0.860	,	0.630	,	0.630	,	0.800	,	0.620	,	0.720	,	0.430	,	0.530	,	0.590	,	0.670	,	0.530	,	0.700	,	0.770	,	0.820	,	0.620	,	0.720	,	0.620	,	0.540	,	0.840	,	0.750	,	0.470	,	0.490	,	0.490	,	0.660	,	0.660	,	0.870	,	0.820	,	0.940	,	0.820	,	0.700	,	0.890	,	0.840	,	0.780	,	0.720	,	0.710	,	0.580	,	0.540	,	0.660	,	0.580	,	0.700	,	0.890	,	0.590	,	0.640	,	0.660	,	0.650	,	0.670	,	0.750	,	0.750	,	0.840	,	0.640	,	0.640	,	0.560	,	0.460	,	0.700	,	0.680	,	0.760	,	0.710	,	0.550	,	0.790	,	0.850	,	0.560	,	0.740	,	0.760	,	0.610	,	0.480	,	0.680	,	0.790	,	0.770	,	0.910	,	0.680	,	0.670	,	0.920	,	0.690	,	0.680	,	0.640	,	0.460	,	0.720	,	0.590	,	0.610	,	0.570	,	0.810	,	0.790	,	0.510	,	0.800	,	0.840	,	0.820	,	0.640	,	0.470	,	0.630	,	0.660	,	0.880	,	0.700	,	0.750	,	0.840	,	0.990	,	0.810	,	0.820	,	0.680	,	0.860	,	0.840	,	0.520	,	0.440	,	0.660	,	0.610	,	0.500	,	0.730	,	0.490	,	0.770	,	0.480	,	0.660	,	0.880	,	0.470	,	0.640	,	0.760	,	0.520	,	0.510	,	0.780	,	0.610	,	0.570	,	0.720	,	0.480	,	0.930	,	0.880	,	0.640	,	0.830	,	0.470	,	0.660	,	0.500	,	0.900	,	0.600	,	0.880	,	0.640	,	0.750	,	0.690	,	0.800	,	0.760	,	0.440	,	0.930	,	0.900	,	0.980	,	0.722	,	0.720	,	0.700	,	0.880	,	0.500	,	0.620	,	0.470	,	0.820	,	0.930	,	0.820	,	0.560	,	0.590	,	0.690	,	0.520	,	0.770	,	0.640	,	0.800	,	0.420	,	0.680	,	0.540])

xorig=np.array([ 6.081890244	,	9.6	,	9.8	,	10	,	10.61	,	11.99931559	,	12.61333333	,	14	,	14.12681564	,	14.22824742	,	14.30375691	,	14.9725	,	15	,	15.1552381	,	15.27825503	,	15.45473684	,	15.90439437	,	16	,	16	,	17.11377522	,	17.73604396	,	18	,	18.33789189	,	19	,	19.19910663	,	19.20018519	,	19.22396491	,	19.33	,	19.46869565	,	19.6435	,	19.82983607	,	19.93967816	,	20.19778689	,	21	,	21	,	21.697	,	22.21012245	,	22.70155224	,	22.85591623	,	22.9668323	,	23.30244019	,	23.46	,	23.79694611	,	23.81181818	,	24.11026455	,	24.17708215	,	24.18021563	,	24.26814016	,	24.30048443	,	25.06155738	,	25.07552124	,	25.37680672	,	25.49148148	,	25.60588235	,	25.65299771	,	25.79528517	,	26	,	26	,	26.01695652	,	26.01956522	,	26.10638298	,	26.40531507	,	26.55296188	,	26.74688312	,	26.76073469	,	26.84539683	,	26.93666667	,	27.47	,	28.90940476	,	28.99095238	,	29.43350158	,	29.76398058	,	29.8102965	,	30.11913649	,	30.16797468	,	30.27005495	,	30.27506849	,	30.35542857	,	30.76928571	,	30.91688889	,	31.11539063	,	31.51671429	,	31.53748201	,	31.56058577	,	31.67576812	,	31.70365559	,	31.71693151	,	31.76072727	,	31.96	,	32.23571429	,	32.52498789	,	32.70419192	,	32.765	,	32.81420168	,	32.88285714	,	33.25937695	,	33.30252852	,	33.3102459	,	34.10764479	,	34.26532091	,	34.33725806	,	35.04207547	,	35.22134771	,	35.30122449	,	35.345	,	35.57010101	,	35.85147651	,	35.86796875	,	36.01585366	,	36.31315018	,	36.47704501	,	36.5718578	,	36.68140351	,	36.85859459	,	37.13043478	,	37.60631579	,	37.68773026	,	37.96491484	,	37.98896104	,	37.99133333	,	38.08757202	,	38.23	,	38.23034483	,	38.32656388	,	38.35512635	,	38.45383117	,	39.05642857	,	39.34466019	,	39.3614094	,	39.50591837	,	39.5302924	,	39.53113744	,	39.57763066	,	39.62785498	,	40.25851852	,	40.57849785	,	40.64137363	,	40.89454545	,	40.90584527	,	41.54104478	,	41.65253456	,	41.75937269	,	41.96136213	,	42.03925373	,	42.08746479	,	42.23	,	42.52917647	,	42.70972477	,	42.73377049	,	42.87646341	,	43.00371901	,	43.06340782	,	43.46741144	,	43.5275	,	43.66619048	,	43.67547826	,	43.96111111	,	44.01992126	,	44.06539326	,	44.32587224	,	44.57091644	,	44.64640569	,	44.87679452	,	45.36043478	,	45.43011494	,	45.70455801	,	45.72065789	,	45.87166163	,	45.92486141	,	45.92604938	,	45.94776398	,	46.40203647	,	46.45325062	,	46.51645022	,	46.535	,	46.55	,	46.78533898	,	46.78748031	,	47.25583062	,	47.28176991	,	47.38838298	,	47.49979849	,	47.50731092	,	47.66111111	,	47.94136986	,	48.07795918	,	48.0938961	,	48.22359223	,	48.50410658	,	48.57269663	,	48.64906667	,	48.69696429	,	48.75830846	,	48.82255952	,	48.97448052	,	49.22547619	,	49.38211155	,	49.53557377	,	49.69918919	,	49.90817337	,	49.96838961	,	50.29409639	,	50.4908313	,	50.49136986	,	50.60853862	,	50.69259574	,	50.83643735	,	51.45448598	,	51.5039759	,	51.54777293	,	51.79763077	,	52.13326146	,	52.34522184	,	52.41878706	,	52.48043956	,	52.58647619	,	53.17511727	,	53.55675676	,	53.55887931	,	53.8909816	,	54.17081181	,	54.46131868	,	54.7741791	,	54.94717557	,	55.0027003	,	55.05556901	,	55.12642857	,	55.33981221	,	55.73440678	,	55.81527132	,	56.11674772	,	56.31865801	,	57.01981873	,	57.06897243	,	57.11981865	,	57.19375	,	57.46671159	,	57.48908676	,	57.74410774	,	58.09621622	,	58.17262295	,	58.22649547	,	58.40737201	,	58.58634146	,	58.61571429	,	58.90225974	,	59.50614525	,	60.64186722	,	60.71192308	,	60.77384259	,	61.32173469	,	61.58186813	,	61.61043956	,	61.72	,	61.72237467	,	61.93857143	,	62.109375	,	62.16760291	,	62.20737991	,	62.21388571	,	62.2930031	,	62.3666	,	62.5975	,	62.65625899	,	62.78731343	,	62.86793103	,	63.78396226	,	63.86182073	,	63.91361345	,	64.60185841	,	64.64171315	,	64.87590426	,	64.94677419	,	65.06636691	,	65.07661376	,	65.61901639	,	65.95626404	,	66.51636015	,	67.42508982	,	67.52169863	,	67.56742268	,	67.99716981	,	68.00129353	,	69.04178138	,	69.10833333	,	69.42809524	,	69.43129121	,	69.6271028	,	69.78982143	,	69.86472284	,	70.08017857	,	71.23396437	,	71.60664083	,	71.6208	,	71.67407792	,	72.21632877	,	72.92977199	,	73.47585127	,	74.77012987	,	76.17	,	76.71207006	,	77.08158904	,	77.4747981	,	78.08273556	,	78.10706349	,	78.57081232	,	80.20971429	,	80.33534483	,	80.47101604	,	81.69098592	,	81.97305764	,	82.75887052	,	82.79146444	,	83.69559278	,	83.744	,	84.1776234	,	84.64359649	,	85.08764706	,	85.65	,	86.29973384	,	86.32017751	,	86.98934783	,	87.18	,	88	,	88.38973422	,	90.19535714	,	91.66682609	,	92.2445584	,	92.43315942	,	95.23398496	,	96.14096774	,	96.61201327	,	98.77309589	,	99.24515038	,	99.44827004	,	100.9509028	,	101.8163196	,	102.6460526	,	103.1905627	,	104.0361633	,	107.2425397	,	117.9728571	,	119.5495477])

# Print the estimated parameters
print(result.x)

a1 = np.arange(0.00, 4.02, 0.02)
a2 = np.arange(-5, 5.02, 0.02)
Rtable = np.zeros((len(a1), len(a2)))

#yd_exp = np.mean(y)

for i in range(len(a1)):
    for j in range(len(a2)):
        y_mod = result.x[0] / (1 + np.exp(-a1[i] * xorig - a2[j]))
        R = np.corrcoef(yorig, y_mod)
        Rtable[i,j] = R[0,1]**2

Rtable = np.nan_to_num(Rtable, nan=0)
Rmax = np.max(Rtable)
rows, cols = np.where(Rtable == Rmax)
print(a1[rows])
print(a2[cols])
xorigf=np.sort(xorig, axis=0)
ybest= result.x[0] / (1 + np.exp(-a1[rows] * xorigf - a2[cols]))


import matplotlib.pyplot as plt

plt.plot(xorig, yorig, 'o')
plt.plot(xorigf, ybest)

plt.show()
