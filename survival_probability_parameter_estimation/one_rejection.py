# -*- coding: utf-8 -*-
"""
Created on Fri Feb 24 18:21:32 2023

@author: simon
"""



import numpy as np
from scipy.optimize import minimize
import math


def quadratic(x,a, b, c):
    return a/(1+2.73**(-b*x-c))

def objective(params):
    a, b, c = params
    return np.sum((quadratic(x,a,b, c) - y)**2)



# Load the data - the extra zeros are added as the curve should start from 0 
y=np.array([0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,	0.730	,	0.730	,	0.440	,	0.730	,	0.350	,	0.590	,	0.730	,	0.490	,	0.480	,	0.390	,	0.730	,	0.740	,	0.580	,	0.370	,	0.640	,	0.620	,	0.760	,	0.660	,	0.650	,	0.350	,	0.570	,	0.600	,	0.460	,	0.450	,	0.820	,	0.570	,	0.410	,	0.440	,	0.620	,	0.700	,	0.740	,	0.710	,	0.730	,	0.710	,	0.600	,	0.590	,	0.770	,	0.730	,	0.680	,	0.450	,	0.560	,	0.630	,	0.810	,	0.540	,	0.740	,	0.840	,	0.430	,	0.790	,	0.820	,	0.810	,	0.740	,	0.780	,	0.680	,	0.760	,	0.790	,	0.800	,	0.810	,	0.840	,	0.630	,	0.840	,	0.680	,	0.640	,	0.810	,	0.730	,	0.660	,	0.900	,	0.830	,	0.650	,	0.760	,	0.800	,	0.830	,	0.770	,	0.890	,	0.580	,	0.640	,	0.420	,	0.800	,	0.720	,	0.590	,	0.800	,	0.870	,	0.560	,	0.800	,	0.780	,	0.840	,	0.740	,	0.710	,	0.880	,	0.870	,	0.830	,	0.770	,	0.710	,	0.830	,	0.790	,	0.870	,	0.780	,	0.470	,	0.820	,	0.840	,	0.810	,	0.840	,	0.860	,	0.800	,	0.800	,	0.800	,	0.610	,	0.610	,	0.650	,	0.640	,	0.650	,	0.880	,	0.640	,	0.790	,	0.900	,	0.730	,	0.830	,	0.800	,	0.810	,	0.830	,	0.860	,	0.810	,	0.620	,	0.850	,	0.900	,	0.800	,	0.800	,	0.730	,	0.810	,	0.870	,	0.690	,	0.900	,	0.630	,	0.790	,	0.840	,	0.860	,	0.610	,	0.890	,	0.800	,	0.530	,	0.560	,	0.900	,	0.750	,	0.850	,	0.870	,	0.710	,	0.800	,	0.920	,	0.670	,	0.820	,	0.900	,	0.860	,	0.790	,	0.740	,	0.710	,	0.840	,	0.510	,	0.880	,	0.910	,	0.730	,	0.650	,	0.780	,	0.840	,	0.780	,	0.760	,	0.890	,	0.660	,	0.640	,	0.640	,	0.870	,	0.870	,	0.580	,	0.790	,	0.690	,	0.920	,	0.820	,	0.780	,	0.610	,	0.870	,	0.780	,	0.740	,	0.840	,	0.690	,	0.830	,	0.720	,	0.760	,	0.560	,	0.790])
x=np.array([ 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0,0	, 0, 	9.009257143	,	10.27989071	,	13.48429577	,	14.00143617	,	14.07696429	,	16.78934247	,	18.9	,	19.47672131	,	20.26782857	,	20.727	,	21.01491429	,	23.04576271	,	24.8443553	,	25.20262338	,	28.22584726	,	28.41194805	,	29.06787611	,	29.31472727	,	29.58217949	,	29.86726027	,	30.07	,	30.12424419	,	30.50666667	,	31.95460808	,	31.96643836	,	32.11438017	,	32.18395225	,	32.25222222	,	32.3697479	,	32.39275449	,	33.40627178	,	33.8387062	,	34.07060241	,	34.61367542	,	34.89526316	,	35.25264957	,	35.37214925	,	35.46629032	,	35.54538462	,	36.25130435	,	36.26120301	,	36.33894879	,	36.5228	,	36.53146718	,	37.73759657	,	38.12900966	,	38.30172973	,	39.65995556	,	39.77702703	,	39.93832918	,	40.55428571	,	40.89497159	,	41.03	,	41.13123711	,	41.18119134	,	41.25584488	,	41.38612245	,	41.85183673	,	42.22693878	,	43.06232639	,	43.26533333	,	43.4977381	,	43.97339806	,	44	,	44.61035714	,	44.798125	,	44.93930233	,	44.98185567	,	44.98936508	,	45.12424318	,	45.37384946	,	45.41530612	,	45.58668281	,	46.24043038	,	46.33571429	,	46.58670554	,	48.0567027	,	48.81142857	,	48.86624615	,	49.81666667	,	49.86928571	,	49.888	,	50.23	,	51.61058824	,	52.19455197	,	52.33758621	,	52.69406593	,	52.87	,	52.90806971	,	52.91722222	,	53.00828571	,	53.15189041	,	53.1952381	,	53.22991111	,	53.69817043	,	54.17286533	,	54.95821429	,	55.11176471	,	55.73430657	,	55.78967742	,	56.35724138	,	56.66857585	,	57.18532663	,	57.37820896	,	57.66924119	,	57.81418033	,	57.8490604	,	58.24102041	,	58.54333333	,	58.5926	,	58.7676178	,	59.03247813	,	59.38766854	,	59.58264957	,	60.00669323	,	60.19083744	,	60.33717949	,	60.40671875	,	60.44857143	,	60.50177778	,	60.86669173	,	60.8999631	,	60.9721039	,	60.98854037	,	61.36720548	,	61.49946136	,	61.74125506	,	61.90168142	,	62.71051587	,	62.77268482	,	62.82280323	,	63.22976744	,	63.33327103	,	63.44	,	63.96598015	,	65.14809917	,	66.23960591	,	66.41722543	,	67.00781513	,	67.06771429	,	67.6176	,	67.73827586	,	68.27919137	,	69.23239554	,	70.17058824	,	70.73453571	,	71.40795238	,	71.81427313	,	71.86025806	,	72.01340708	,	72.04692308	,	72.18457143	,	72.27536232	,	72.65298701	,	72.72674134	,	74.20096154	,	74.41709677	,	75.05781385	,	77.0692437	,	77.98160748	,	78.1369246	,	78.59026455	,	79.26323077	,	79.36413428	,	80.09716129	,	80.10856423	,	82.58229219	,	84.21825581	,	84.45073634	,	84.80056995	,	85.43267281	,	86.90817121	,	89.62528571	,	90.16469388	,	92.75251337	,	95.83181818	,	96.06407266	,	96.23554622	,	103.839	,	104.2533036	,	104.3013882	,	104.3129814	,	105.2425543	,	108.6262918	,	119.5109227	,	122.8456126	,	133.9229457])

# Define the objective function
def objective(params):
    a,b, c = params
    return np.sum((quadratic(x, a,b, c) - y)**2)

# Estimate the parameters using the least squares method
initial_guess = [0,0, 0]
result = minimize(objective, initial_guess)

yorig=np.array([0.730	,	0.730	,	0.440	,	0.730	,	0.350	,	0.590	,	0.730	,	0.490	,	0.480	,	0.390	,	0.730	,	0.740	,	0.580	,	0.370	,	0.640	,	0.620	,	0.760	,	0.660	,	0.650	,	0.350	,	0.570	,	0.600	,	0.460	,	0.450	,	0.820	,	0.570	,	0.410	,	0.440	,	0.620	,	0.700	,	0.740	,	0.710	,	0.730	,	0.710	,	0.600	,	0.590	,	0.770	,	0.730	,	0.680	,	0.450	,	0.560	,	0.630	,	0.810	,	0.540	,	0.740	,	0.840	,	0.430	,	0.790	,	0.820	,	0.810	,	0.740	,	0.780	,	0.680	,	0.760	,	0.790	,	0.800	,	0.810	,	0.840	,	0.630	,	0.840	,	0.680	,	0.640	,	0.810	,	0.730	,	0.660	,	0.900	,	0.830	,	0.650	,	0.760	,	0.800	,	0.830	,	0.770	,	0.890	,	0.580	,	0.640	,	0.420	,	0.800	,	0.720	,	0.590	,	0.800	,	0.870	,	0.560	,	0.800	,	0.780	,	0.840	,	0.740	,	0.710	,	0.880	,	0.870	,	0.830	,	0.770	,	0.710	,	0.830	,	0.790	,	0.870	,	0.780	,	0.470	,	0.820	,	0.840	,	0.810	,	0.840	,	0.860	,	0.800	,	0.800	,	0.800	,	0.610	,	0.610	,	0.650	,	0.640	,	0.650	,	0.880	,	0.640	,	0.790	,	0.900	,	0.730	,	0.830	,	0.800	,	0.810	,	0.830	,	0.860	,	0.810	,	0.620	,	0.850	,	0.900	,	0.800	,	0.800	,	0.730	,	0.810	,	0.870	,	0.690	,	0.900	,	0.630	,	0.790	,	0.840	,	0.860	,	0.610	,	0.890	,	0.800	,	0.530	,	0.560	,	0.900	,	0.750	,	0.850	,	0.870	,	0.710	,	0.800	,	0.920	,	0.670	,	0.820	,	0.900	,	0.860	,	0.790	,	0.740	,	0.710	,	0.840	,	0.510	,	0.880	,	0.910	,	0.730	,	0.650	,	0.780	,	0.840	,	0.780	,	0.760	,	0.890	,	0.660	,	0.640	,	0.640	,	0.870	,	0.870	,	0.580	,	0.790	,	0.690	,	0.920	,	0.820	,	0.780	,	0.610	,	0.870	,	0.780	,	0.740	,	0.840	,	0.690	,	0.830	,	0.720	,	0.760	,	0.560	,	0.790])
xorig=np.array([9.009257143	,	10.27989071	,	13.48429577	,	14.00143617	,	14.07696429	,	16.78934247	,	18.9	,	19.47672131	,	20.26782857	,	20.727	,	21.01491429	,	23.04576271	,	24.8443553	,	25.20262338	,	28.22584726	,	28.41194805	,	29.06787611	,	29.31472727	,	29.58217949	,	29.86726027	,	30.07	,	30.12424419	,	30.50666667	,	31.95460808	,	31.96643836	,	32.11438017	,	32.18395225	,	32.25222222	,	32.3697479	,	32.39275449	,	33.40627178	,	33.8387062	,	34.07060241	,	34.61367542	,	34.89526316	,	35.25264957	,	35.37214925	,	35.46629032	,	35.54538462	,	36.25130435	,	36.26120301	,	36.33894879	,	36.5228	,	36.53146718	,	37.73759657	,	38.12900966	,	38.30172973	,	39.65995556	,	39.77702703	,	39.93832918	,	40.55428571	,	40.89497159	,	41.03	,	41.13123711	,	41.18119134	,	41.25584488	,	41.38612245	,	41.85183673	,	42.22693878	,	43.06232639	,	43.26533333	,	43.4977381	,	43.97339806	,	44	,	44.61035714	,	44.798125	,	44.93930233	,	44.98185567	,	44.98936508	,	45.12424318	,	45.37384946	,	45.41530612	,	45.58668281	,	46.24043038	,	46.33571429	,	46.58670554	,	48.0567027	,	48.81142857	,	48.86624615	,	49.81666667	,	49.86928571	,	49.888	,	50.23	,	51.61058824	,	52.19455197	,	52.33758621	,	52.69406593	,	52.87	,	52.90806971	,	52.91722222	,	53.00828571	,	53.15189041	,	53.1952381	,	53.22991111	,	53.69817043	,	54.17286533	,	54.95821429	,	55.11176471	,	55.73430657	,	55.78967742	,	56.35724138	,	56.66857585	,	57.18532663	,	57.37820896	,	57.66924119	,	57.81418033	,	57.8490604	,	58.24102041	,	58.54333333	,	58.5926	,	58.7676178	,	59.03247813	,	59.38766854	,	59.58264957	,	60.00669323	,	60.19083744	,	60.33717949	,	60.40671875	,	60.44857143	,	60.50177778	,	60.86669173	,	60.8999631	,	60.9721039	,	60.98854037	,	61.36720548	,	61.49946136	,	61.74125506	,	61.90168142	,	62.71051587	,	62.77268482	,	62.82280323	,	63.22976744	,	63.33327103	,	63.44	,	63.96598015	,	65.14809917	,	66.23960591	,	66.41722543	,	67.00781513	,	67.06771429	,	67.6176	,	67.73827586	,	68.27919137	,	69.23239554	,	70.17058824	,	70.73453571	,	71.40795238	,	71.81427313	,	71.86025806	,	72.01340708	,	72.04692308	,	72.18457143	,	72.27536232	,	72.65298701	,	72.72674134	,	74.20096154	,	74.41709677	,	75.05781385	,	77.0692437	,	77.98160748	,	78.1369246	,	78.59026455	,	79.26323077	,	79.36413428	,	80.09716129	,	80.10856423	,	82.58229219	,	84.21825581	,	84.45073634	,	84.80056995	,	85.43267281	,	86.90817121	,	89.62528571	,	90.16469388	,	92.75251337	,	95.83181818	,	96.06407266	,	96.23554622	,	103.839	,	104.2533036	,	104.3013882	,	104.3129814	,	105.2425543	,	108.6262918	,	119.5109227	,	122.8456126	,	133.9229457])

# Print the estimated parameters
print(result.x)

a1 = np.arange(0.00, 4.02, 0.02)
a2 = np.arange(-5, 5.02, 0.02)
Rtable = np.zeros((len(a1), len(a2)))

#yd_exp = np.mean(y)

for i in range(len(a1)):
    for j in range(len(a2)):
        y_mod = result.x[0] / (1 + np.exp(-a1[i] * xorig - a2[j]))
        R = np.corrcoef(yorig, y_mod)
        Rtable[i,j] = R[0,1]**2

Rtable = np.nan_to_num(Rtable, nan=0)
Rmax = np.max(Rtable)
rows, cols = np.where(Rtable == Rmax)
print(a1[rows])
print(a2[cols])
xorigf=np.sort(xorig, axis=0)
ybest= result.x[0] / (1 + np.exp(-a1[rows] * xorigf - a2[cols]))


import matplotlib.pyplot as plt

plt.plot(xorig, yorig, 'o')
plt.plot(xorigf, ybest)

plt.show()
